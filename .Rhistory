diabetic_data <- read.csv("~/Documents/ML/dataset_diabetes/diabetic_data.csv")
View(diabetic_data)
#knn
knn.model <- knn(readmitted ~ ., data = as.data.frame(development))
install.packages('knn')
library(class)
# Split Data into Training and Testing in R
sample_size = floor(0.7*nrow(diabetic_data))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(diabetic_data)),size = sample_size)
development =diabetic_data[picked,]
holdout =diabetic_data[-picked,]
factor_to_number = function(x){
if (class(x)=='factor')
x%>%as.numeric(factor(x))
else
x
}
development <- sapply(development,factor_to_number)
holdout <- sapply(holdout, factor_to_number)
library(neuralnet)
library(readr)
library(varhandle)
library(dplyr)
library(aod)
library(nnet)
library(VIM)
library(svm)
library(class)
factor_to_number = function(x){
if (class(x)=='factor')
x%>%as.numeric(factor(x))
else
x
}
development <- sapply(development,factor_to_number)
holdout <- sapply(holdout, factor_to_number)
#knn
knn.model <- knn(readmitted ~ ., data = as.data.frame(development))
#knn
knn.model <- knn(development,holdout,cl= 'readmitted',k=13)
#knn
knn.model <- knn(development,holdout,readmitted,k=13)
#knn
knn.model <- knn(development,holdout,factor(development$readmitted),k=13)
development <- development %>%as.data.frame(sapply(development,factor_to_number))
#knn
knn.model <- knn(development,holdout,factor(development$readmitted),k=13)
tab <- table(knn.model,as.data.frame(holdout)$readmitted)
tab
results.knn <- data.frame(actual = holdout$readmitted,prediction = knn.model)
results.knn <- data.frame(actual = as.data.frame(holdout)$readmitted,prediction = knn.model)
results.knn
count(filter(results.knn,actual==prediction))/count(results.knn)
mylogit
# Split Data into Training and Testing in R
sample_size = floor(0.7*nrow(diabetic_data))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(diabetic_data)),size = sample_size)
development =diabetic_data[picked,]
holdout =diabetic_data[-picked,]
sapply(development,class)
factor_to_number = function(x){
if (class(x)=='factor')
x%>%as.numeric(factor(x))
else
x
}
development <- development %>%as.data.frame(sapply(development,factor_to_number))
library(neuralnet)
library(readr)
library(varhandle)
library(dplyr)
library(aod)
library(nnet)
library(VIM)
library(svm)
library(class)
library(libsvm)
library(svmlib)
library(class)
factor_to_number = function(x){
if (class(x)=='factor')
x%>%as.numeric(factor(x))
else
x
}
development <- development %>%as.data.frame(sapply(development,factor_to_number))
development <- development %>%as.data.frame(sapply(development,factor_to_number))
development <- as.data.frame(sapply(development,factor_to_number))
holdout <- as.data.frame(sapply(holdout, factor_to_number))
sapply(diabetic_data,hist)
sapply(diabetic_data,barplot)
barplot
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(x), main = 'Barplot of '+x, xlab = x)
else
hist(x, main ='Hist of '+x,xlab=x)
}
sapply(diabetic_data,variable_graph)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(x), main = paste('Barplot of ',x), xlab = x)
else
hist(x, main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,variable_graph)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(x), main = paste('Barplot of ',x), xlab = x)
else
hist(diabetic_data[,x], main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,variable_graph)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(x), main = paste('Barplot of ',x), xlab = x)
else
hist(diabetic_data[x], main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,variable_graph)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(x), main = paste('Barplot of ',x), xlab = x)
else
hist(diabetic_data$x, main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,variable_graph)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(x), main = paste('Barplot of ',x), xlab = x)
else
hist(x, main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,variable_graph)
class(diabetic_data)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(diabetic_data[,x]), main = paste('Barplot of ',x), xlab = x)
else
hist(diabetic_data[,x], main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,variable_graph)
sapply(diabetic_data[,gender])
sapply(diabetic_data[,gender],mean)
sapply(diabetic_data,class)
diabetic_data$gender
diabetic_data[gender]
diabetic_data[,gender]
sapply(diabetic_data,FUN= function(s)  hist(diabetic_data[,s], main=paste("Histogram of",s), xlab = s))
diabetic_data <- as.data.frame(diabetic_data)
sapply(diabetic_data,FUN= function(s)  hist(diabetic_data[,s], main=paste("Histogram of",s), xlab = s))
sapply(diabetic_data,FUN= function(s)  hist(diabetic_data$s, main=paste("Histogram of",s), xlab = s))
install.packages("VIF")
install.packages("VIM")
install.packages('MICE')
install.packages('mice')
nn <- neuralnet(factor(readmitted) ~ ., data=development, hidden=c(4,3,2,1), linear.output=TRUE, threshold=0.01)
library(neuralnet)
library(readr)
library(varhandle)
library(dplyr)
library(aod)
library(nnet)
library(VIM)
library(svmlib)
library(class)
diabetic_data <- as.data.frame(read.csv("~/Documents/ML/dataset_diabetes/diabetic_data.csv"))
# Import data
setwd("/Users/jenny/Documents/ML/")
# Import data
setwd("/Users/jenny/Documents/ML/dataset_diabetes/")
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
wd
mkdir
setwd("~/Documents/ML/GlobantTest")
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
diabetic_data <- as.data.frame(read.csv("/dataset_diabetes/diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
diabetic_data <- as.data.frame(read.csv("dataset_diabetes/diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
diabetic_data <- as.data.frame(read.csv("dataset_diabetes/diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
diabetic_data <- as.data.frame(read.csv("/dataset_diabetes/diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
# Import data
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
# Import data
setwd("~/Documents/ML/GlobantTest")
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
# Import data
setwd("~/Documents/ML/GlobantTest/dataset_diabetes")
# Import data
setwd("~/Documents/ML/GlobantTest/dataset_diabetes")
# Import data
setwd("/Users/jenny/Documents/ML/dataset_diabetes")
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
# Import data
setwd("/Users/jenny/Documents/ML/dataset_diabetes/")
diabetic_data <- as.data.frame(read.csv("diabetic_data.csv",head=TRUE,sep=";",stringsAsFactors = TRUE))
setwd("~/Documents/ML/GlobantTest")
diabetic_data <- read.csv("~/Documents/ML/dataset_diabetes/diabetic_data.csv", row.names=1)
View(diabetic_data)
# Split Data into Training and Testing in R
sample_size = floor(0.7*nrow(diabetic_data))
set.seed(777)
picked = sample(seq_len(nrow(diabetic_data)),size = sample_size)
development =diabetic_data[picked,]
holdout =diabetic_data[-picked,]
diabetic_data <- as.data.frame(diabetic_data)
variable_graph = function(x){
if (class(x)=='factor')
barplot(table(diabetic_data[,x]), main = paste('Barplot of ',x), xlab = x)
else
hist(diabetic_data[,x], main =paste('Hist of ',x),xlab=x)
}
sapply(diabetic_data,FUN= function(s)  hist(x, main=paste("Histogram of",s), xlab = s))
sapply(diabetic_data,FUN= function(s)  hist(s, main=paste("Histogram of",s), xlab = s))
if (class(x)=='factor')
x
factor_to_number = function(x){
if (class(x)=='factor')
x%>%as.numeric(factor(x))
else
x
}
development <- as.data.frame(sapply(development,factor_to_number))
holdout <- as.data.frame(sapply(holdout, factor_to_number))
nn <- neuralnet(factor(readmitted) ~ ., data=development, hidden=c(4,3,2,1), linear.output=TRUE, threshold=0.01)
nn <- neuralnet(factor(readmitted) ~ ., data=development, hidden=c(3,2,1), linear.output=TRUE, threshold=0.01)
mylogit <- multinom(readmitted ~ ., data = as.data.frame(development))
results.logit <- data.frame(actual = holdout$readmitted, prediction = mylogit.results)
mylogit.results <- predict(mylogit,holdout)
results.logit <- data.frame(actual = holdout$readmitted, prediction = mylogit.results)
count(filter(results.logit,actual==prediction))
summary(mylogit)
count(filter(results.logit,actual==prediction))/count(results.logit)
summary(diabetic_data)
diabetic_data <- replace_with_na(data=diabetic_data,replace=list(admission_type_id = c(5,6,8)))
diabetic_data <- replace_with_na(data=diabetic_data,replace=list(race = c('?')))
library(neuralnet)
library(readr)
library(varhandle)
library(dplyr)
library(aod)
library(nnet)
library(class)
library(mice)
library(naniar)
mylogit <- multinom(readmitted ~ .-c(patient_nbr), data = as.data.frame(development))
results.logit <- data.frame(actual = holdout$readmitted, prediction = mylogit.results)
mylogit.results <- predict(mylogit,holdout[-c(patient_nbr)])
mylogit.results <- predict(mylogit,holdout)
results.logit <- data.frame(actual = holdout$readmitted, prediction = mylogit.results)
count(filter(results.logit,actual==prediction))/count(results.logit)
diabetic_data <- subset(diabetic_data, select=-c(patient_nbr,examide,citoglipton,acetohexamide,troglitazone,glimepiride.pioglitazone,metformin.pioglitazone,metformin.rosiglitazone))
mylogit <- multinom(readmitted ~ .-c(patient_nbr), data = as.data.frame(development))
mylogit.results <- predict(mylogit,holdout)
library(e1071)
mylogit.results <- predict(mylogit,holdout)
results.logit <- data.frame(actual = holdout$readmitted, prediction = mylogit.results)
count(filter(results.logit,actual==prediction))/count(results.logit)
summary(mylogit)
# Split Data into Training and Testing in R
sample_size = floor(0.7*nrow(diabetic_data))
set.seed(777)
# randomly split data in r
picked = sample(seq_len(nrow(diabetic_data)),size = sample_size)
development =diabetic_data[picked,]
holdout =diabetic_data[-picked,]
diabetic_data <- as.data.frame(diabetic_data)
development <- as.data.frame(development)
holdout <- as.data.frame(holdout)
mylogit <- multinom(readmitted ~ ., data = as.data.frame(development))
development
